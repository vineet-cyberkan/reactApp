vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (master)
$ git commit -m 'initial commit revision 2, setup finished'
On branch master
nothing to commit, working tree clean

vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (master)
$ git status
On branch master
nothing to commit, working tree clean

vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (master)
$ git checkout -b 01-setup
Switched to a new branch '01-setup'

vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (01-setup)
$ git commit -m 'initial commit revision 2, setup finished'
On branch 01-setup
nothing to commit, working tree clean

vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (01-setup)
$ git remote

vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (01-setup)
$ git fetch

vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (01-setup)
$ git push
fatal: No configured push destination.
Either specify the URL from the command-line or configure a remote repository using

    git remote add <name> <url>

and then push using the remote name

    git push <name>


vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (01-setup)
$ git pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=<remote>/<branch> 01-setup


vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (01-setup)
$ git pull -m
error: unknown switch `m'
usage: git pull [<options>] [<repository> [<refspec>...]]

    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --progress            force progress reporting
    --recurse-submodules[=<on-demand>]
                          control for recursive fetching of submodules

Options related to merging
    -r, --rebase[=(false|true|merges|preserve|interactive)]
                          incorporate changes by rebasing rather than merging
    -n                    do not show a diffstat at the end of the merge
    --stat                show a diffstat at the end of the merge
    --log[=<n>]           add (at most <n>) entries from shortlog to merge commit message
    --signoff[=...]       add Signed-off-by:
    --squash              create a single commit instead of doing a merge
    --commit              perform a commit if the merge succeeds (default)
    --edit                edit message before committing
    --ff                  allow fast-forward
    --ff-only             abort if fast-forward is not possible
    --verify-signatures   verify that the named commit has a valid GPG signature
    --autostash           automatically stash/stash pop before and after rebase
    -s, --strategy <strategy>
                          merge strategy to use
    -X, --strategy-option <option=value>
                          option for selected merge strategy
    -S, --gpg-sign[=<key-id>]
                          GPG sign commit
    --allow-unrelated-histories
                          allow merging unrelated histories

Options related to fetching
    --all                 fetch from all remotes
    -a, --append          append to .git/FETCH_HEAD instead of overwriting
    --upload-pack <path>  path to upload pack on remote end
    -f, --force           force overwrite of local branch
    -t, --tags            fetch all tags and associated objects
    -p, --prune           prune remote-tracking branches no longer on remote
    -j, --jobs[=<n>]      number of submodules pulled in parallel
    --dry-run             dry run
    -k, --keep            keep downloaded pack
    --depth <depth>       deepen history of shallow clone
    --unshallow           convert to a complete repository
    --update-shallow      accept refs that update .git/shallow
    --refmap <refmap>     specify fetch refmap
    -4, --ipv4            use IPv4 addresses only
    -6, --ipv6            use IPv6 addresses only


vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (01-setup)
$



vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (01-setup)
$ git branch
* 01-setup
  master

vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (01-setup)
$ git ls
git: 'ls' is not a git command. See 'git --help'.

The most similar command is
        lfs

vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (01-setup)
$ ls
dist/  node_modules/  package.json  package-lock.json  src/  webpack.config.js

vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (01-setup)
$ git branch -r

vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (01-setup)
$ git pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=<remote>/<branch> master


vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (master)
$ git pull https://github.com/vineet-cyberkan/reactApp.git master
warning: no common commits
remote: Enumerating objects: 34, done.
remote: Total 34 (delta 0), reused 0 (delta 0), pack-reused 34
Unpacking objects: 100% (34/34), done.
From https://github.com/vineet-cyberkan/reactApp
 * branch            master     -> FETCH_HEAD
fatal: refusing to merge unrelated histories

vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (master)
$ git push --help










vineet.kumar@Nvineetkumar MINGW64 /e/work/reactApp (master)
$ git
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
